!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);class r{constructor(e,t){this.x=e,this.y=t}get cross(){return[new r(this.x+1,this.y),new r(this.x-1,this.y),new r(this.x,this.y+1),new r(this.x,this.y-1)]}}const i=new r(0,0),o=new r(9,9);var a=new class{constructor(e=10,t=10){this.width=e,this.height=t,this.space=new Array(e*t)}isInside(e){return e.x>=0&&e.x<this.width&&e.y>=0&&e.y<this.height}getValue(e){return this.space[e.x+this.width*e.y]}setValue(e,t){this.space[e.x+this.width*e.y]=t}clearSpace(){this.space=this.space.fill(0)}getVector(e){return new r(e%this.width,Math.floor(e/this.width))}getVectorsWithValue(e){let t=[];return this.space.forEach((n,r)=>{n===e&&t.push(this.getVector(r))}),t}};const s=e=>{for(let t=e.space.length-1;t>=0;t--)"W"!==e.space[t]&&"S"!==e.space[t]&&"E"!==e.space[t]&&(e.space[t]=0);return e},c=e=>{i.cross.forEach(t=>{e.isInside(t)&&0===e.getValue(t)&&e.setValue(t,1)});for(let t=1;e.space.includes(0);t++){let n=[],r=[];if(e.getVectorsWithValue(t).forEach(e=>{n=n.concat(e.cross)}),n.forEach(t=>{e.isInside(t)&&r.push(e.getValue(t))}),-1===r.indexOf(0))break;if(-1!==r.indexOf("E"))break;n.forEach(n=>{e.isInside(n)&&0===e.getValue(n)&&e.setValue(n,t+1)})}},u=e=>{let t=document.getElementById("maze").children;e.space.forEach((e,n)=>{t[n].dataset.value=e})},l=()=>{s(a),c(a);let e=(e=>{let t,n=[],r=1/0;if(void 0===(t=o.cross.find(t=>{if(!e.isInside(t))return!1;let n=e.getValue(t);return!(!Number.isInteger(n)||0===n)&&(r=Math.min(r,n))===n})))return alert("This maze doesn't have solutions"),void(n=[]);for(n.unshift(t);r>1;)t=t.cross.find(t=>{if(!e.isInside(t))return!1;let n=e.getValue(t);return!(!Number.isInteger(n)||0===n)&&(r=Math.min(r,n))===n}),n.unshift(t);return n})(a);(f=e)&&f.forEach(e=>{a.setValue(e,"R")}),document.getElementById("answer").innerText=e?e.length:"##"};var f;const d=()=>{a.clearSpace(),a.setValue(i,"S"),a.setValue(o,"E"),u(a)};n(5);document.getElementById("control").addEventListener("click",e=>{const t=e.target;if("BUTTON"===t.tagName)switch(t.id){case"run":l(),u(a);break;case"reset":d()}}),document.getElementById("maze").addEventListener("click",e=>{const t=e.target;if("maze__cell"!==t.className)return;let n=t.dataset;"W"===n.value?(n.value="",a.space[n.index]=0):(n.value="W",a.space[n.index]="W"),s(a),u(a)}),a.setValue(i,"S"),a.setValue(o,"E"),a.setValue(new r(1,0),"W"),a.setValue(new r(1,1),"W"),s(a),c(a),u(a)},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var i,o=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?e:(i=0===o.indexOf("//")?o:0===o.indexOf("/")?n+o:r+o.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(e,t,n){var r,i,o={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=r.apply(this,arguments)),i}),s=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),c=null,u=0,l=[],f=n(1);function d(e,t){for(var n=0;n<e.length;n++){var r=e[n],i=o[r.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](r.parts[a]);for(;a<r.parts.length;a++)i.parts.push(m(r.parts[a],t))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(m(r.parts[a],t));o[r.id]={id:r.id,refs:1,parts:s}}}}function p(e,t){for(var n=[],r={},i=0;i<e.length;i++){var o=e[i],a=t.base?o[0]+t.base:o[0],s={css:o[1],media:o[2],sourceMap:o[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}function h(e,t){var n=s(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),l.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=s(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,i)}}function v(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=l.indexOf(e);t>=0&&l.splice(t,1)}function g(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),b(t,e.attrs),h(e,t),t}function b(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function m(e,t){var n,r,i,o;if(t.transform&&e.css){if(!(o=t.transform(e.css)))return function(){};e.css=o}if(t.singleton){var a=u++;n=c||(c=g(t)),r=x.bind(null,n,a,!1),i=x.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",b(t,e.attrs),h(e,t),t}(t),r=function(e,t,n){var r=n.css,i=n.sourceMap,o=void 0===t.convertToAbsoluteUrls&&i;(t.convertToAbsoluteUrls||o)&&(r=f(r));i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var a=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,n,t),i=function(){v(n),n.href&&URL.revokeObjectURL(n.href)}):(n=g(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),i=function(){v(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=p(e,t);return d(n,t),function(e){for(var r=[],i=0;i<n.length;i++){var a=n[i];(s=o[a.id]).refs--,r.push(s)}e&&d(p(e,t),t);for(i=0;i<r.length;i++){var s;if(0===(s=r[i]).refs){for(var c=0;c<s.parts.length;c++)s.parts[c]();delete o[s.id]}}}};var y,w=(y=[],function(e,t){return y[e]=t,y.filter(Boolean).join("\n")});function x(e,t,n,r){var i=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=w(t,i);else{var o=document.createTextNode(i),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var i=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),o=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(o).concat([i]).join("\n")}var a;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];"number"==typeof o&&(r[o]=!0)}for(i=0;i<e.length;i++){var a=e[i];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){(e.exports=n(3)(!1)).push([e.i,"body {\r\n    font-family: sans-serif;\r\n}\r\n.maze {\r\n    display: grid;\r\n    grid: repeat(10, 25px) / repeat(10, 25px);\r\n}\r\n.maze__cell {\r\n    box-sizing: border-box;\r\n    border: thin dashed lightgray;\r\n}\r\n[data-value = W] {\r\n    background-color: black;\r\n}\r\n[data-value = R] {\r\n    background-image: radial-gradient(circle at center, black 20%, transparent 20%);\r\n}\r\n[data-value = S] {\r\n    background-image: radial-gradient(circle at center, black 50%, transparent 50%);\r\n}\r\n[data-value = E] {\r\n    background-image: radial-gradient(circle at center, transparent 20%, black 20%, black 50%, transparent 50%);\r\n}\r\n\r\n.control {\r\n    padding: 10px;\r\n}\r\n.control__button {\r\n    width: 50px;\r\n    height: 20px;\r\n}",""])},function(e,t,n){var r=n(4);"string"==typeof r&&(r=[[e.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(2)(r,i);r.locals&&(e.exports=r.locals)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,